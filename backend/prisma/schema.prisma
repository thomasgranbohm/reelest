generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String           @id @default(uuid())
    createdAt       DateTime         @default(now())
    displayName     String
    email           String           @unique
    followedBy      User[]           @relation("UserFollows")
    following       User[]           @relation("UserFollows")
    password        String
    profilePictures ProfilePicture[]
    updatedAt       DateTime         @default(now())
    username        String           @unique
    videos          Video[]
    comments        Comment[]
    threads         Thread[]
}

model Video {
    id          String      @id @default(uuid())
    createdAt   DateTime    @default(now())
    description String?
    duration    Int?
    status      VideoStatus @default(PROCESSING)
    title       String
    updatedAt   DateTime    @default(now())
    userId      String
    user        User        @relation(fields: [userId], references: [id])
    thumbnails  Thumbnail[]
    threads     Thread[]
}

enum VideoStatus {
    CREATED
    PROCESSING
    PUBLISHED
}

enum ImageType {
    WEBP
    BASE64
}

model ProfilePicture {
    id     Int       @id @default(autoincrement())
    height Int
    type   ImageType
    url    String
    userId String    @unique
    user   User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    width  Int
}

model Thumbnail {
    id      Int       @id @default(autoincrement())
    height  Int
    type    ImageType
    url     String
    video   Video     @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    videoId String    @unique
    width   Int
}

model Thread {
    id      String    @id @default(uuid())
    video   Video?    @relation(fields: [videoId], references: [id])
    videoId String?   @unique
    content String
    user    User      @relation(fields: [userId], references: [id])
    userId  String    @unique
    replies Comment[]
}

model Comment {
    id        Int       @id @default(autoincrement())
    user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String?   @unique
    replyToId Int?      @unique
    replyTo   Comment?  @relation("CommentReplies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replies   Comment[] @relation("CommentReplies")
    createdAt DateTime  @default(now())
    content   String
    thread    Thread?   @relation(fields: [threadId], references: [id])
    threadId  String?   @unique
}
